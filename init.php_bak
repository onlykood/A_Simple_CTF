<?php
# 文件检测，是否已安装数据库
if(!file_exists('config.php')){
	//returnInfo('No install','-1');
	die(json_encode(array(array('-1','No Install!'))));
}
include 'config.php';

// 错误代码
define('MY_ERROR',[
	'SQL_CONNECT_FAIL'	=> '连接数据库失败，请重试！',
	'SQL_ERROR'			=> '数据库错误，请重试！',
	'DATA_ERROR'		=> '数据异常，请重试！',
	'DATA_MISS'			=> '数据丢失，请重试！',
	'NO_LOGIN'			=> '请登录后再次常试！',
]);

// 一些功能的开关
define('MY_SWITCH',[
	'DYNAMIC_SCORE'	=> true, // 定义是否开启动态得分机制
	'ONE_BLOOD'		=> true, // 定义是否开启一血机制，加分人数随着下面的oneBlood数目而定
	'DEBUG'			=> false, // 是否是测试，上线请修改为 flase
]);

// 一些配置数据
define("MY_CONFIG",[
	'FIRST_FEW_BLOOD_SCORE'	=> array(10,6,3,1),		// 定义前几血的额外加分情况
	'RECENT_SOLVE_SHOW_NUM'	=> 10,					// 定义首页最近解题展示数量
	'DOCKER_EXIST_TIME'		=> 3600,				// 定义 docker 容器存活时间
	'EMAIL_USERNAME'		=> '',	// 定义发送邮件的邮箱账户
	'EMAIL_PASSWORD'		=> '',	// 定义发送邮件的邮箱密码
	'SUPER_PASSWORD'		=> 'XXXXXX',	// 定义测试用的超级密码
	'RAND_FLAG_HEADER'		=> 'flag',				// 定义随机化 flag 的 flag 头
	'DEFAULT_AVATAR'		=> '1.jpg',
	'GET_DOCKER_TOKEN'		=> 'XXXXXX',
	'DOCKER_SERVER'			=> '',
]);

// 数据库连接类
class Database{
	private static $database;
	public static function getConnection(){
		if ( !self::$database ){
			self::$database = new mysqli( SQL_CONFIG['DB_HOST'], SQL_CONFIG['DB_USER'], SQL_CONFIG['DB_PASS'], SQL_CONFIG['DB_NAME'] );
			self::$database->set_charset("utf8");
		}
		return self::$database;
	}
}

// 用于 Debug 模式，获取响应开始时间
if(MY_SWITCH['DEBUG']){
	$startTime = microtime(true);
}

/**
 * @description 用 json 格式返回信息
 * @Author      kood
 * @DateTime    2019-02-27
 * @param       string     $text      小提示框的显示文字
 * @param       string     $code      返回的状态码
 * @param       array      $data      返回的数据
 * @param       string     $debugInfo 如果开启 debug 模式，附加此项
 * @return      string                json 字符串
 */
function returnInfo(string $text='NULL',int $code=0,$datas=array()){
	global $link;
	$info=array(
		array($code,$text),
		$datas
	);
	if(MY_SWITCH['DEBUG']){
		Global $startTime;
		$endTime = microtime(true);
		$info[0][]=$endTime-$startTime;
		$info[0][]=$link->error;
	}
	exit(json_encode($info));
}


#指定允许其他域名访问  
#header('Access-Control-Allow-Origin:*');  

#开启session
session_start();

#设置html编码格式
header("Content-type: text/html; charset=utf-8"); 

#设置php时区
date_default_timezone_set('Asia/Shanghai');

if(MY_SWITCH['DEBUG']){
	// Debug
	ini_set( 'display_errors', '1' );
}
else{
	//关闭所有错误报告
	error_reporting(0);
}

#加载令牌SESSION
if( !isset( $_SESSION['token'] ) ){
	$_SESSION['token'] = hash( 'ripemd160', sha1( uniqid( '', true ) ) );
}

if( !isset( $_SESSION['userid'] ) ){
	$_SESSION['userid'] = false;
}

//检测数据库连接情况
$link=@Database::getConnection();
if (mysqli_connect_errno()){
	returnInfo(MY_ERROR['SQL_CONNECT_FAIL']);
}
